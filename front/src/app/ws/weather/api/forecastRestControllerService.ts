/**
 * Soccer API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: voetbalsvk@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Injectable, Optional} from '@angular/core';
import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';
import {Observable} from 'rxjs/Observable';

import {ForecastDTO} from "../";
import {ForecastApiConfiguration} from "../forecastApiConfiguration";


@Injectable()
export class ForecastRestControllerService {

    public defaultHeaders = new HttpHeaders();
    public configuration = new ForecastApiConfiguration();
    protected basePath = 'https://api.openweathermap.org';
    private units = "metric";
    private country = "be";

    constructor(protected httpClient: HttpClient, @Optional() configuration: ForecastApiConfiguration) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
            this.country = configuration.country || this.country;
        }
    }

    public getForecast(lang: any, zip: any, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (lang === null || lang === undefined) {
            throw new Error('Required parameter lang was null or undefined when calling getForecast.');
        }

        if (zip === null || zip === undefined) {
            throw new Error('Required parameter lang was null or undefined when calling getForecast.');
        }

        let queryParameters = new HttpParams();
        queryParameters = queryParameters.set('lang', <any>lang);
        queryParameters = queryParameters.set('zip', <any>zip + ',be');
        queryParameters = queryParameters.set('appid', this.configuration.accessToken);
        queryParameters = queryParameters.set('lang', <any>lang);
        queryParameters = queryParameters.set('units', <any>this.units);

        let headers = this.defaultHeaders;

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ForecastDTO>(`${this.basePath}/data/2.5/forecast`,
            {
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                params: queryParameters,
            }
        );
    }

    getWeatherIcon(iconName) {
        return "https://openweathermap.org/img/w/" + iconName + ".png"
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

}
