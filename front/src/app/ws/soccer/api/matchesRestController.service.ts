/**
 * Soccer API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: voetbalsvk@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs/Observable';

import {ByteResponseDTO} from '../model/byteResponseDTO';
import {MatchDTO} from '../model/matchDTO';
import {MatchPollDTO} from '../model/matchPollDTO';
import {ResponseEntity} from '../model/responseEntity';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class MatchesRestControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create match
     * 
     * @param dto dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMatch(dto: MatchDTO, observe?: 'body', reportProgress?: boolean): Observable<MatchDTO>;
    public createMatch(dto: MatchDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchDTO>>;
    public createMatch(dto: MatchDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchDTO>>;
    public createMatch(dto: MatchDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling createMatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys["X-Auth-Token"]) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys["X-Auth-Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<MatchDTO>(`${this.basePath}/api/v1/matches`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete match
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMatch(id: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public deleteMatch(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public deleteMatch(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public deleteMatch(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteMatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<ResponseEntity>(`${this.basePath}/api/v1/matches/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches1(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches1(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches1.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.head<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches2(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches2(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches2(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches2(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches2.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches3(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches3(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches3(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches3(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches3.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches4(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches4(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches4.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches5(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches5(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches5(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches5(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches5.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatches6(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatches6(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatches6(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatches6(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatches6.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.options<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/export`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar1(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar1(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar1.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.head<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar2(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar2(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar2(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar2(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar2.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar3(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar3(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar3(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar3(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar3.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar4(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar4(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar4.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar5(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar5(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar5(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar5(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar5.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export matches calendar for season
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportMatchesCalendar6(id: string, observe?: 'body', reportProgress?: boolean): Observable<ByteResponseDTO>;
    public exportMatchesCalendar6(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteResponseDTO>>;
    public exportMatchesCalendar6(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteResponseDTO>>;
    public exportMatchesCalendar6(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling exportMatchesCalendar6.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.options<ByteResponseDTO>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}/calendar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get match
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMatch(id: string, observe?: 'body', reportProgress?: boolean): Observable<MatchDTO>;
    public getMatch(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchDTO>>;
    public getMatch(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchDTO>>;
    public getMatch(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MatchDTO>(`${this.basePath}/api/v1/matches/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get poll for match
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public latestMatchPoll(observe?: 'body', reportProgress?: boolean): Observable<MatchPollDTO>;
    public latestMatchPoll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchPollDTO>>;
    public latestMatchPoll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchPollDTO>>;
    public latestMatchPoll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys["X-Auth-Token"]) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys["X-Auth-Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MatchPollDTO>(`${this.basePath}/api/v1/match/latest/poll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get poll for match
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public matchPoll(id: string, observe?: 'body', reportProgress?: boolean): Observable<MatchPollDTO>;
    public matchPoll(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchPollDTO>>;
    public matchPoll(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchPollDTO>>;
    public matchPoll(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling matchPoll.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys['X-Auth-Token']) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys['X-Auth-Token']);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MatchPollDTO>(`${this.basePath}/api/v1/match/${encodeURIComponent(String(id))}/poll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get matches for season
     *
     * @param id id
     * @param iSO3Country
     * @param iSO3Language
     * @param country
     * @param displayCountry
     * @param displayLanguage
     * @param displayName
     * @param displayScript
     * @param displayVariant
     * @param language
     * @param script
     * @param unicodeLocaleAttributes
     * @param unicodeLocaleKeys
     * @param variant
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public matchesForSeason(id: string, iSO3Country?: string, iSO3Language?: string, country?: string, displayCountry?: string, displayLanguage?: string, displayName?: string, displayScript?: string, displayVariant?: string, language?: string, script?: string, unicodeLocaleAttributes?: Array<string>, unicodeLocaleKeys?: Array<string>, variant?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<MatchDTO>>;
    public matchesForSeason(id: string, iSO3Country?: string, iSO3Language?: string, country?: string, displayCountry?: string, displayLanguage?: string, displayName?: string, displayScript?: string, displayVariant?: string, language?: string, script?: string, unicodeLocaleAttributes?: Array<string>, unicodeLocaleKeys?: Array<string>, variant?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MatchDTO>>>;
    public matchesForSeason(id: string, iSO3Country?: string, iSO3Language?: string, country?: string, displayCountry?: string, displayLanguage?: string, displayName?: string, displayScript?: string, displayVariant?: string, language?: string, script?: string, unicodeLocaleAttributes?: Array<string>, unicodeLocaleKeys?: Array<string>, variant?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MatchDTO>>>;
    public matchesForSeason(id: string, iSO3Country?: string, iSO3Language?: string, country?: string, displayCountry?: string, displayLanguage?: string, displayName?: string, displayScript?: string, displayVariant?: string, language?: string, script?: string, unicodeLocaleAttributes?: Array<string>, unicodeLocaleKeys?: Array<string>, variant?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling matchesForSeason.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (iSO3Country !== undefined) {
            queryParameters = queryParameters.set('ISO3Country', <any>iSO3Country);
        }
        if (iSO3Language !== undefined) {
            queryParameters = queryParameters.set('ISO3Language', <any>iSO3Language);
        }
        if (country !== undefined) {
            queryParameters = queryParameters.set('country', <any>country);
        }
        if (displayCountry !== undefined) {
            queryParameters = queryParameters.set('displayCountry', <any>displayCountry);
        }
        if (displayLanguage !== undefined) {
            queryParameters = queryParameters.set('displayLanguage', <any>displayLanguage);
        }
        if (displayName !== undefined) {
            queryParameters = queryParameters.set('displayName', <any>displayName);
        }
        if (displayScript !== undefined) {
            queryParameters = queryParameters.set('displayScript', <any>displayScript);
        }
        if (displayVariant !== undefined) {
            queryParameters = queryParameters.set('displayVariant', <any>displayVariant);
        }
        if (language !== undefined) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (script !== undefined) {
            queryParameters = queryParameters.set('script', <any>script);
        }
        if (unicodeLocaleAttributes) {
            unicodeLocaleAttributes.forEach((element) => {
                queryParameters = queryParameters.append('unicodeLocaleAttributes', <any>element);
            })
        }
        if (unicodeLocaleKeys) {
            unicodeLocaleKeys.forEach((element) => {
                queryParameters = queryParameters.append('unicodeLocaleKeys', <any>element);
            })
        }
        if (variant !== undefined) {
            queryParameters = queryParameters.set('variant', <any>variant);
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys["X-Auth-Token"]) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys["X-Auth-Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<MatchDTO>>(`${this.basePath}/api/v1/matches/season/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get next match
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nextMatchPoll(observe?: 'body', reportProgress?: boolean): Observable<MatchDTO>;
    public nextMatchPoll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchDTO>>;
    public nextMatchPoll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchDTO>>;
    public nextMatchPoll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys["X-Auth-Token"]) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys["X-Auth-Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MatchDTO>(`${this.basePath}/api/v1/matches/next`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update match
     * 
     * @param dto dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMatch(dto: MatchDTO, observe?: 'body', reportProgress?: boolean): Observable<MatchDTO>;
    public updateMatch(dto: MatchDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MatchDTO>>;
    public updateMatch(dto: MatchDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MatchDTO>>;
    public updateMatch(dto: MatchDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling updateMatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (token) required
        if (this.configuration.apiKeys["X-Auth-Token"]) {
            headers = headers.set('X-Auth-Token', this.configuration.apiKeys["X-Auth-Token"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<MatchDTO>(`${this.basePath}/api/v1/matches`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
